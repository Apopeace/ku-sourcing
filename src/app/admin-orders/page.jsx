"use client"

import React, { useState, useEffect, Fragment } from 'react';
import { collection, getDoc, getDocs, doc, where, query, setDoc, updateDoc } from 'firebase/firestore';
import { ref as storageRef, uploadBytes, getDownloadURL } from 'firebase/storage';
import { db, storage } from '../config/firebase';
import { Listbox, Transition } from '@headlessui/react';
import { CheckIcon, ChevronUpDownIcon } from '@heroicons/react/20/solid';
import Sidebar from './Sidebar';
import withAuth from '../context/withAuth';
import { jsPDF } from 'jspdf';
import 'jspdf-autotable';
import LoadingIndicator from '../components/alerts/loading-indicator';
import { faFileDownload, faFileImage, faUpload } from '@fortawesome/free-solid-svg-icons';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { arrayUnion } from 'firebase/firestore';


const statuses = [
    { id: 1, name: 'Filter by status' },
    { id: 2, name: 'Processing' },
    { id: 3, name: 'Paid' },
    { id: 4, name: 'Unpaid' },
    { id: 5, name: 'Shipped' },
    { id: 6, name: 'Arrived' },

];
const services = [
    { id: 1, name: 'Filter by service' },
    { id: 2, name: 'COD in Africa (Ayoub)' },
    { id: 3, name: 'Shipsen (Hassan)' },
    { id: 4, name: 'Afrique COD (Amine)' },
    { id: 5, name: 'LoftyService' },
    { id: 6, name: 'Other' },
];

function classNames(...classes) {
    return classes.filter(Boolean).join(' ');
}

const Orders = () => {
    const [orders, setOrders] = useState([]);
    const [filteredOrders, setFilteredOrders] = useState([]);
    const [searchTerm, setSearchTerm] = useState('');
    const [selectedOrders, setSelectedOrders] = useState(new Set());
    const [selectedStatus, setSelectedStatus] = useState(statuses[0]);
    const [selectedService, setSelectedService] = useState(services[0]);
    const [isLoading, setIsLoading] = useState(true);

    useEffect(() => {
        setTimeout(() => {
            setIsLoading(false);
        }, 3000);
    }, []);


    const fetchOrders = async () => {
        setIsLoading(true);
        try {
            const ordersRef = collection(db, "product_request_forms");
            const querySnapshot = await getDocs(ordersRef);
            const fetchedOrders = await Promise.all(querySnapshot.docs.map(async (doc) => {
                const orderData = doc.data();
                const orderId = doc.id;

                // Fetch user data
                const userData = await fetchUserData(orderData.userId);

                // Fetch delivery proofs
                const deliveryProofQuery = query(collection(db, "orderDeliveryProof"), where("orderId", "==", orderId));
                const deliveryProofsSnapshot = await getDocs(deliveryProofQuery);
                const urls = deliveryProofsSnapshot.docs.flatMap(proofDoc => proofDoc.data().urls || []);

                // Fetch proof of payment
                let proofFiles = [];
                if (orderData.proofUploaded) {
                    const proofRef = collection(db, "proofOfPayment", orderData.userId, "orders");
                    const proofsQuery = query(proofRef, where("orderId", "==", orderId));
                    const proofsSnapshot = await getDocs(proofsQuery);
                    proofsSnapshot.forEach(proofDoc => {
                        const fileData = proofDoc.data();
                        proofFiles.push(
                            fileData.url.match(/\.(jpeg|jpg|gif|png)$/) ?
                                <a href={fileData.url} target="_blank" rel="noopener noreferrer" title="View Image">
                                    <FontAwesomeIcon icon={faFileImage} className="text-blue-500 mx-1" size='2x' /> View Image
                                </a> :
                                <a href={fileData.url} target="_blank" title="Download File">
                                    <FontAwesomeIcon icon={faFileDownload} className="text-blue-500 mx-1" size='2x' /> View File
                                </a>
                        );
                    });
                } else {
                    proofFiles.push("No proof uploaded");
                }

                return {
                    id: orderId,
                    userEmail: userData?.email,
                    proofOfPayment: proofFiles,
                    urls,
                    ...orderData
                };
            }));

            fetchedOrders.sort((a, b) => (b.formCreationDate.seconds - a.formCreationDate.seconds));
            setOrders(fetchedOrders);
        } catch (error) {
            console.error("Failed to fetch orders:", error);
        }
        setIsLoading(false);
    };

    useEffect(() => {
        fetchOrders();
    }, []);


    const uploadDeliveryProof = async (files, orderId) => {
        if (!files.length) return;

        setIsLoading(true);
        const orderProofRef = doc(db, "orderDeliveryProof", orderId);

        try {
            const newProofs = [];
            for (const file of files) {
                const fileRef = storageRef(storage, `orderDeliveryProof/${orderId}/${file.name}`);
                const uploadResult = await uploadBytes(fileRef, file);
                const downloadURL = await getDownloadURL(uploadResult.ref);
                newProofs.push(downloadURL);
            }

            const docSnapshot = await getDoc(orderProofRef);
            if (!docSnapshot.exists()) {
                await setDoc(orderProofRef, { urls: newProofs, orderId: orderId });
            } else {
                await updateDoc(orderProofRef, {
                    urls: arrayUnion(...newProofs)
                });
            }

            await fetchOrders();
        } catch (error) {
            console.error("Failed to upload delivery proofs:", error);
        }

        setIsLoading(false);
    };


    useEffect(() => {
        let filtered = orders;

        if (selectedStatus.name !== 'Filter by status') {
            filtered = filtered.filter(order => order.status === selectedStatus.name);
        }

        if (selectedService.name !== 'Filter by service') {
            filtered = filtered.filter(order =>
                order.destinations.some(dest => dest.service === selectedService.name)
            );
        }

        if (searchTerm) {
            filtered = filtered.filter(order => order.id.toLowerCase().includes(searchTerm.toLowerCase()));
        }

        setFilteredOrders(filtered);
    }, [searchTerm, selectedStatus, selectedService, orders]);

    useEffect(() => {
        setSelectedOrders(new Set());
    }, [searchTerm, selectedStatus, selectedService, orders]);

    const handleSelectOrder = (orderId) => {
        setSelectedOrders(prevSelectedOrders => {
            const newSelection = new Set(prevSelectedOrders);
            if (newSelection.has(orderId)) {
                newSelection.delete(orderId);
            } else {
                newSelection.add(orderId);
            }
            return newSelection;
        });
    };

    const handleSelectAllOrders = (e) => {
        if (e.target.checked) {
            setSelectedOrders(new Set(filteredOrders.map(order => order.id)));
        } else {
            setSelectedOrders(new Set());
        }
    };

    const isAllSelected = selectedOrders.size === filteredOrders.length && selectedOrders.size > 0;

    const formatDate = (timestamp) => {
        if (timestamp && typeof timestamp === 'object' && 'seconds' in timestamp) {
            const date = new Date(timestamp.seconds * 1000);
            // Date to a readable string
            return date.toLocaleDateString('en-US', {
                year: 'numeric',
                month: 'long',
                day: 'numeric',
            });
        }
        // If timestamp is not in expected format returning a fallback string
        return 'Date not available';
    };


    const handlePrintSelected = async () => {
        if (selectedOrders.size === 0) {
            console.error('No order selected to download.');
            return;
        }

        const pdfDoc = new jsPDF({
            orientation: 'portrait',
            unit: 'mm',
            format: 'a4'
        });

        const logo = '
        const logoWidth = 50;
        const logoHeight = 30;
        const veryLightGray = [245, 245, 245];

        const drawBackground = (doc) => {
            doc.setFillColor(...veryLightGray);
            doc.rect(0, 0, doc.internal.pageSize.width, doc.internal.pageSize.height, 'F');
        };

        const drawLogo = (doc, xPosition, yPosition) => {
            if (logo) {
                doc.addImage(logo, 'PNG', xPosition, yPosition, logoWidth, logoHeight);
            }
        };

        const addHeader = (doc) => {
            doc.setFillColor(100, 100, 240);
            doc.rect(0, 0, doc.internal.pageSize.width, 20, 'F');
            if (logo) {
                doc.addImage(logo, 'PNG', 10, 5, logoWidth, logoHeight);
            }
            doc.setFontSize(16);
            doc.setTextColor(255);
            const text = 'KUAI SOURCING';
            const textWidth = doc.getTextWidth(text);
            const xPosition = (doc.internal.pageSize.width - textWidth) / 2; // Calculate x position for centered text
            doc.text(text, xPosition, 15); // Use calculated xPosition and fixed y position
        };

        const addFooter = (doc) => {
            const finalY = doc.internal.pageSize.height - 20;
            doc.setFillColor(100, 100, 240);
            doc.rect(0, finalY, doc.internal.pageSize.width, 10, 'F');
            doc.setTextColor(255);
            doc.setFontSize(10);
            doc.text('KUAI SOURCING', doc.internal.pageSize.width / 2, finalY + 7, { align: 'center' });
        };

        for (const [index, orderId] of Array.from(selectedOrders).entries()) {
            if (index > 0) {
                pdfDoc.addPage();
                drawBackground(pdfDoc);
            }
            drawBackground(pdfDoc);
            addHeader(pdfDoc);

            const orderToPrint = orders.find(order => order.id === orderId);
            if (!orderToPrint) {
                console.error(`Order with ID ${orderId} not found.`);
                continue;
            }

            const userData = await fetchUserData(orderToPrint.userId);
            const shippingType = orderToPrint.airFreight ? 'Express Delivery' : 'Normal Delivery';
            const orderDate = formatDate(orderToPrint.formCreationDate);

            let startY = 20 + logoHeight + 5;

            orderToPrint.destinations.forEach((dest, index) => {
                drawLogo(pdfDoc, (pdfDoc.internal.pageSize.width / 2) - (logoWidth / 2), startY);
                startY += logoHeight;

                const commonData = [
                    ['REFERENCE', orderToPrint.id],
                    ['CUSTOMER NAME', userData ? `${userData.firstName} ${userData.familyName}` : ''],
                    ['ORDER DATE', orderDate],
                    ['SHIPPING TYPE', shippingType]
                ];

                const destinationData = [
                    ['QUANTITY', dest.quantity],
                    ['SHIPPING TO', dest.country],
                    ['SERVICE', dest.service]
                ];

                const bodyData = commonData.concat(destinationData);

                pdfDoc.autoTable({
                    head: [['INFORMATION', 'DETAIL']],
                    body: bodyData,
                    startY: startY,
                    styles: { fontSize: 10, cellPadding: 2, lineColor: [0, 0, 255], lineWidth: 0.1 },
                    headStyles: { fillColor: [0, 0, 255], textColor: [255], fontStyle: 'bold', halign: 'center' },
                    bodyStyles: { fillColor: [255, 255, 255], textColor: [0] },
                    alternateRowStyles: { fillColor: veryLightGray },
                    theme: 'grid'
                });

                startY = pdfDoc.lastAutoTable.finalY + 10;
            });

            if (index < Array.from(selectedOrders).length - 1) {
                pdfDoc.addPage();
                drawBackground(pdfDoc);
                startY = 20;
            }
        }

        setTimeout(() => {
            addFooter(pdfDoc);
            pdfDoc.save('OrderLabel.pdf');
        }, 2000);
    };



    // Function to fetch user data
    const fetchUserData = async (userId) => {
        try {
            const userRef = doc(db, "users", userId);
            const userSnap = await getDoc(userRef);

            if (userSnap.exists()) {
                return userSnap.data(); // Returns the user document data
            } else {
                console.log("No such user!");
                return null;
            }
        } catch (error) {
            console.error("Error fetching user data:", error);
            return null;
        }
    };

    if (isLoading) {
        return <LoadingIndicator />;
    }



    return (
        <>
            <Sidebar />
            <div className=" ml-14 mx-auto p-4">
                <div className="flex justify-between mb-4">
                    <input
                        type="text"
                        placeholder="Search order by reference"
                        className="input border-blue-300 appearance-none rounded-lg w-1/4 px-2 ml-4 text-gray-600"
                        onChange={(e) => setSearchTerm(e.target.value)}
                    />

                    <Listbox value={selectedStatus} onChange={setSelectedStatus} className="hidden md:block">
                        {({ open }) => (
                            <>
                                <div className="relative">
                                    <Listbox.Button className="relative w-48 bg-white border border-gray-300 rounded-md shadow-sm pl-3 pr-10 py-2 text-left cursor-default focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500 sm:text-sm">
                                        <span className="block truncate">{selectedStatus.name}</span>
                                        <span className="absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none">
                                            <ChevronUpDownIcon className="h-5 w-5 text-gray-400" aria-hidden="true" />
                                        </span>
                                    </Listbox.Button>

                                    <Transition
                                        show={open}
                                        as={Fragment}
                                        leave="transition ease-in duration-100"
                                        leaveFrom="opacity-100"
                                        leaveTo="opacity-0"
                                    >
                                        <Listbox.Options className="absolute z-10 mt-1 w-full bg-white shadow-lg max-h-60 rounded-md py-1 text-base ring-1 ring-black ring-opacity-5 overflow-auto focus:outline-none sm:text-sm">
                                            {statuses.map((status) => (
                                                <Listbox.Option
                                                    key={status.id}
                                                    className={({ active }) =>
                                                        classNames(
                                                            active ? 'bg-blue-600 text-white' : 'text-gray-700',
                                                            'cursor-default select-none relative py-2 pl-3 pr-9'
                                                        )
                                                    }
                                                    value={status}
                                                >
                                                    {({ selected, active }) => (
                                                        <>
                                                            <div className="flex items-center">
                                                                <span
                                                                    className={classNames(selected ? 'font-semibold' : 'font-normal', 'block truncate')}
                                                                >
                                                                    {status.name}
                                                                </span>
                                                            </div>

                                                            {selected ? (
                                                                <span
                                                                    className={classNames(
                                                                        active ? 'text-white' : 'text-blue-600',
                                                                        'absolute inset-y-0 right-0 flex items-center pr-4'
                                                                    )}
                                                                >
                                                                    <CheckIcon className="h-5 w-5" aria-hidden="true" />
                                                                </span>
                                                            ) : null}
                                                        </>
                                                    )}
                                                </Listbox.Option>
                                            ))}
                                        </Listbox.Options>
                                    </Transition>
                                </div>
                            </>
                        )}
                    </Listbox>


                    <Listbox value={selectedService} onChange={setSelectedService} className="hidden md:block">
                        {({ open }) => (
                            <>
                                <div className="relative">
                                    <Listbox.Button className="relative w-44 bg-white border border-gray-300 rounded-md shadow-sm pl-3 pr-10 py-2 text-left cursor-default focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500 sm:text-sm">
                                        <span className="block truncate">{selectedService.name}</span>
                                        <span className="absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none">
                                            <ChevronUpDownIcon className="h-5 w-5 text-gray-400" aria-hidden="true" />
                                        </span>
                                    </Listbox.Button>

                                    <Transition
                                        show={open}
                                        as={Fragment}
                                        leave="transition ease-in duration-100"
                                        leaveFrom="opacity-100"
                                        leaveTo="opacity-0"
                                    >
                                        <Listbox.Options className="absolute z-10 mt-1 w-full bg-white shadow-lg max-h-60 rounded-md py-1 text-base ring-1 ring-black ring-opacity-5 overflow-auto focus:outline-none sm:text-sm">
                                            {services.map((service) => (
                                                <Listbox.Option
                                                    key={service.id}
                                                    className={({ active }) =>
                                                        classNames(
                                                            active ? 'bg-blue-600 text-white' : 'text-gray-700',
                                                            'cursor-default select-none relative py-2 pl-3 pr-9'
                                                        )
                                                    }
                                                    value={service}
                                                >
                                                    {({ selected, active }) => (
                                                        <>
                                                            <div className="flex items-center">
                                                                <span
                                                                    className={classNames(selected ? 'font-semibold' : 'font-normal', 'block truncate')}
                                                                >
                                                                    {service.name}
                                                                </span>
                                                            </div>

                                                            {selected ? (
                                                                <span
                                                                    className={classNames(
                                                                        active ? 'text-white' : 'text-blue-600',
                                                                        'absolute inset-y-0 right-0 flex items-center pr-4'
                                                                    )}
                                                                >
                                                                    <CheckIcon className="h-5 w-5" aria-hidden="true" />
                                                                </span>
                                                            ) : null}
                                                        </>
                                                    )}
                                                </Listbox.Option>
                                            ))}
                                        </Listbox.Options>
                                    </Transition>
                                </div>
                            </>
                        )}
                    </Listbox>
                    <button
                        className="hidden md:block bg-blue-500 hover:bg-blue-700 text-white py-2 px-6 rounded-lg shadow-md"
                        onClick={handlePrintSelected}
                    >
                        Print Label
                    </button>
                </div>
                <div className="bg-white shadow-md rounded-lg overflow-hidden ml-4 my-6">
                    <table className=" border-collapse block md:table rounded-lg">
                        <thead className="block md:table-header-group">
                            <tr className="md:border md:border-gray-200 md:bg-gray-100 block md:table-row">
                                <th className="px-4 py-2 block md:table-cell">
                                    <input
                                        type="checkbox"
                                        className="form-checkbox rounded h-4 w-4 transition duration-150 ease-in-out"
                                        onChange={handleSelectAllOrders}
                                        checked={isAllSelected}
                                        ref={input => {
                                            if (input) {
                                                input.indeterminate = selectedOrders.size > 0 && selectedOrders.size < filteredOrders.length;
                                            }
                                        }}
                                    />
                                </th>
                                <th className="text-left md:border md:border-gray-200 px-4 py-2 block md:table-cell">Order Reference / User Email</th>
                                <th className="text-left md:border md:border-gray-200 px-4 py-2 block md:table-cell">Date</th>
                                <th className="text-left md:border md:border-gray-200 px-4 py-2 block md:table-cell">Status</th>
                                <th className="text-left md:border md:border-gray-200 px-4 py-2 block md:table-cell">Product Name</th>
                                <th className="px-4 py-2 block md:table-cell">Destinations</th>
                                <th className="px-4 py-2 block md:table-cell">Proof of Payment</th>
                                <th className="px-4 py-2 block md:table-cell">Delivery Package</th>
                                <th className="px-4 py-2 block md:table-cell">Upload</th>

                            </tr>
                        </thead>
                        <tbody className="block md:table-row-group">
                            {filteredOrders.map((order) => (
                                <tr key={order.id} className={`bg-white ${selectedOrders.has(order.id) ? 'bg-blue-100' : ''}`}>
                                    <td className="px-4 py-2 block md:table-cell">
                                        <input
                                            type="checkbox"
                                            className="form-checkbox rounded h-4 w-4 transition duration-150 ease-in-out"
                                            checked={selectedOrders.has(order.id)}
                                            onChange={() => handleSelectOrder(order.id)}
                                        />
                                    </td>
                                    <td className="px-4 py-2 block md:table-cell">
                                        <div className="font-semibold">{order.id}</div>
                                        <div className="text-sm text-gray-600">{order.userEmail}</div>
                                    </td>
                                    <td className="px-4 py-2 block md:table-cell">{formatDate(order.formCreationDate)}</td>
                                    <td className="px-4 py-2 block md:table-cell">
                                        <span
                                            className={classNames(
                                                'px-3 py-1 inline-flex text-xs leading-5 font-semibold rounded-full',
                                                order.status === "Paid" && "bg-green-100 text-green-600",
                                                order.status === "Processing" && "bg-orange-100 text-orange-600",
                                                order.status === "Unpaid" && "bg-red-100 text-red-500",
                                                order.status === "Shipped" && "bg-gray-100 text-gray-500",
                                                order.status === "Arrived" && "bg-blue-100 text-blue-500",

                                            )}
                                        >
                                            {order.status}
                                        </span>
                                    </td>
                                    <td className="px-4 py-2 block md:table-cell">
                                        <div className="font-semibold">{order.category}</div>
                                        <div className="text-sm text-gray-600">{order.productName}</div>
                                    </td>
                                    <td className="px-4 py-2 block md:table-cell">
                                        {order.destinations.map((dest, index) => (
                                            <div key={index} className="my-1 border p-1 shadow rounded-md">
                                                <div>Country: {dest.country}</div>
                                                <div>Quantity: {dest.quantity}</div>
                                                <div>Service: {dest.service}</div>
                                            </div>
                                        ))}
                                    </td>
                                    <td className="px-4 py-2 block md:table-cell">
                                        {order.proofOfPayment.map((fileComponent, index) => (
                                            <div key={index}>{fileComponent}</div>
                                        ))}
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                        <div class="flex justify-center items-center flex-wrap">
                                            {order.urls && order.urls.length > 0 ? (
                                                order.urls.map((url, index) => (
                                                    <a key={index} href={url} target="_blank" rel="noopener noreferrer" title={`View Proof ${index + 1}`} className="mr-2">
                                                        <img src={url} alt={`Delivery Proof ${index + 1}`} className="w-12 h-12 object-cover rounded" />
                                                    </a>
                                                ))
                                            ) : <span>Not yet uploaded</span>}
                                        </div>
                                    </td>


                                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                        <label className="cursor-pointer flex justify-center items-center">
                                            <FontAwesomeIcon icon={faUpload} className="text-blue-500" size={30} />
                                            <input type="file" multiple className="hidden" onChange={(e) => uploadDeliveryProof(e.target.files, order.id)} />
                                        </label>
                                    </td>
                                </tr>
                            ))}
                        </tbody>
                    </table>
                    {filteredOrders.length === 0 && (
                        <div className="text-center font-bold text-xl p-4">No orders found.</div>
                    )}
                </div>
            </div>
        </>
    );
};

export default withAuth(Orders, true);
